/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Health check
     * @description Check the health status of the API and its dependencies
     */
    get: operations['getHealth']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/health/ready': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Readiness check
     * @description Check if the API is ready to serve requests
     */
    get: operations['getHealthReady']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/health/live': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Liveness check
     * @description Check if the API is alive
     */
    get: operations['getHealthLive']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all pools with pagination and filtering (v1)
     * @description Retrieve pools with advanced pagination and filtering options. Supports filtering by token mints, tick spacing, and custom ordering.
     */
    get: operations['getCachedV1Pools']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/info/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all pools with detailed info and pagination (v1)
     * @description Retrieve pools with detailed information (same format as /:address/details) with pagination and filtering options. Includes token metadata, volume metrics, configuration data, and poolType for each pool. Currently only concentrated pools are supported.
     */
    get: operations['getCachedV1PoolsInfoList']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/info/mint': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get pools by token(s) with pool type filtering (v1)
     * @description Retrieve pools containing the specified token(s) with detailed information. Supports filtering by pool type (all, concentrated, farms) and pagination. If both token0 and token1 are provided, searches for pools containing both tokens in either order. If only one token is provided, searches for all pools containing that token in either position.
     */
    get: operations['getCachedV1PoolsInfoMint']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/info/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get pools info by IDs (v1)
     * @description Retrieve detailed pool information by pool IDs in Raydium-compatible format. Includes token metadata, pricing, volume metrics, and configuration data.
     */
    get: operations['getCachedV1PoolsInfoIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/{address}/details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get comprehensive pool details (v1)
     * @description Retrieve comprehensive pool details including token metadata, volume metrics for different periods, and full configuration data.
     */
    get: operations['getCachedV1PoolsByAddressDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/top/{limit}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get top pools by liquidity (v1)
     * @description Retrieve top pools ordered by liquidity with volume and TVL metrics. Can filter by one token (tokenA) to find pools containing that token, or by two tokens (tokenA and tokenB) to find pools containing both tokens in either order.
     */
    get: operations['getCachedV1PoolsTopByLimit']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/stats/overview': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get pool statistics overview (v1)
     * @description Retrieve overall pool statistics including total liquidity, volume, fees, TVL USD, and pool count.
     */
    get: operations['getCachedV1PoolsStatsOverview']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/line/tvl': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get pool TVL timeline (v1)
     * @description Retrieve past 30 days of average daily TVL (Total Value Locked) data in USD for a specific pool. Data is sourced from hourly TVL snapshots and aggregated to daily averages. Missing days are forward-filled with the previous day's TVL value. Returns daily TVL values that can be used to create line charts.
     */
    get: operations['getCachedV1PoolsLineTvl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/line/liquidity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get pool liquidity timeline (v1)
     * @description Retrieve past 30 days of average daily liquidity data for a specific pool. Data is sourced from actual swap events providing accurate liquidity metrics. Returns daily liquidity values that can be used to create line charts.
     */
    get: operations['getCachedV1PoolsLineLiquidity']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/line/position': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get position line data for a pool (v1)
     * @description Retrieve tick-level position data for a specific pool, including price, liquidity, and tick information. Data is sourced from the Tick table and ordered by tick index.
     */
    get: operations['getCachedV1PoolsLinePosition']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/ohlcv/pair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get OHLCV volume data for a pool (v1)
     * @description Retrieve OHLCV (Open, High, Low, Close, Volume) volume data in USD for a specific pool. Data is sourced from actual swap events with pre-calculated USD volumes, ensuring accurate pricing for all tokens including stablecoins. Supports multiple time intervals: 15m, 1H, 4H, 1D, 1W. If time_from and time_to are not provided, returns approximately 100 data points from the current time backwards.
     */
    get: operations['getCachedV1PoolsOhlcvPair']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/clmm-config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get CLMM configuration details (v1)
     * @description Retrieve CLMM (Concentrated Liquidity Market Maker) configuration details. If poolId is provided, returns config for that specific pool. Otherwise returns all available configurations.
     */
    get: operations['getCachedV1PoolsClmm-config']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/pools/alt/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get alt values for pool IDs (v1)
     * @description Retrieve alt values for a comma-separated list of pool IDs. Maximum 100 pool IDs per request. Returns the alt value for each pool based on internal mapping logic. Example: `/pools/alt/ids?poolIds=pool1,pool2,pool3`
     */
    get: operations['getCachedV1PoolsAltIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/metadata/{address}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get token metadata by address (v1)
     * @description Retrieve token metadata (symbol, name, decimals, logo) by token mint address. Uses Metaplex API, Jupiter Token List, and Solscan as fallbacks.
     */
    get: operations['getCachedV1TokensMetadataByAddress']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/metadata/batch': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get metadata for multiple tokens (v1)
     * @description Retrieve metadata for multiple tokens in a single request. Uses Metaplex API with fallbacks. Maximum 50 addresses per request.
     */
    post: operations['postCachedV1TokensMetadataBatch']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/cache/stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get token cache statistics (v1)
     * @description Retrieve information about the token metadata cache
     */
    get: operations['getCachedV1TokensCacheStats']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/cache/clear': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Clear token cache (v1)
     * @description Clear the token metadata cache
     */
    delete: operations['deleteCachedV1TokensCacheClear']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/price': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get token prices (v1)
     * @description Retrieve USD prices for multiple token addresses. Returns prices as key-value pairs where keys are token addresses and values are USD prices.
     */
    get: operations['getCachedV1TokensPrice']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/price24h': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get token prices 24h ago (v1)
     * @description Retrieve USD prices for multiple token addresses approximately 24h ago. Returns closest available historical prices.
     */
    get: operations['getCachedV1TokensPrice24h']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/tokens/birdeye/defi/multi_price': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get token prices from Birdeye API
     * @description Retrieve real-time USD prices for multiple token addresses using Birdeye API. Maximum 100 tokens per request. Returns detailed price information including update timestamps.
     */
    get: operations['getCachedV1TokensBirdeyeDefiMulti_price']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/v1/balances/{wallet}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get wallet current net worth (v1)
     * @description Retrieve current net worth (USD) of a Solana wallet using Birdeye API. Pagination handled internally; optional force_refresh bypasses cache.
     */
    get: operations['getCachedV1BalancesByWallet']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: never
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getHealth: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getHealthReady: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getHealthLive: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1Pools: {
    parameters: {
      query?: {
        /**
         * @description Page number for pagination
         * @example 1
         * @example 2
         * @example 3
         */
        page?: string | number
        /**
         * @description Number of pools per page (max 100)
         * @example 10
         * @example 20
         * @example 50
         */
        limit?: string | number
        /**
         * @description Filter by first token mint address
         * @example So11111111111111111111111111111111111111112
         */
        tokenMint0?: string
        /**
         * @description Filter by second token mint address
         * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
         */
        tokenMint1?: string
        /**
         * @description Filter by tick spacing
         * @example 1
         * @example 60
         * @example 200
         */
        tickSpacing?: string | number
        /**
         * @description Field to order by. Use "default" for default TVL sorting.
         * @example default
         * @example tvl
         * @example volume_24h
         */
        poolSortField?: 'default' | 'tvl' | 'volume_24h'
        /**
         * @description Order direction
         * @example desc
         * @example asc
         */
        order?: 'asc' | 'desc'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsInfoList: {
    parameters: {
      query?: {
        /**
         * @description Page number for pagination
         * @example 1
         * @example 2
         * @example 3
         */
        page?: string | (number | string)
        /**
         * @description Number of pools per page (max 100)
         * @example 10
         * @example 20
         * @example 50
         */
        pageSize?: string | (number | string)
        /**
         * @description Filter by first token mint address
         * @example So11111111111111111111111111111111111111112
         */
        tokenMint0?: string
        /**
         * @description Filter by second token mint address
         * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
         */
        tokenMint1?: string
        /**
         * @description Filter by tick spacing
         * @example 1
         * @example 60
         * @example 200
         */
        tickSpacing?: string | (number | string)
        /**
         * @description Field to order by. Use "default" for default TVL sorting.
         * @example default
         * @example tvl
         * @example volume_24h
         */
        poolSortField?: 'default' | 'tvl' | 'volume_24h'
        /**
         * @description Order direction
         * @example desc
         * @example asc
         */
        order?: 'asc' | 'desc'
        /**
         * @description Filter by pool type. Currently only "concentrated" and "all" are supported and return the same results.
         * @example all
         * @example concentrated
         */
        poolType?: 'all' | 'standard' | 'concentrated' | 'allFarm' | 'standardFarm' | 'concentratedFarm'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsInfoMint: {
    parameters: {
      query?: {
        /**
         * @description First token mint address. If both token0 and token1 are provided, finds pools containing both tokens. If only one is provided, finds all pools containing that token.
         * @example So11111111111111111111111111111111111111112
         */
        token0?: string
        /**
         * @description Second token mint address. If both token0 and token1 are provided, finds pools containing both tokens. If only one is provided, finds all pools containing that token.
         * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
         */
        token1?: string
        /**
         * @description Filter by pool type. "all" returns all pools, "allFarm" and "concentratedFarm" return only pools with active farms.
         * @example all
         * @example concentrated
         * @example allFarm
         */
        poolType?: 'all' | 'standard' | 'concentrated' | 'allFarm' | 'standardFarm' | 'concentratedFarm'
        /**
         * @description Field to order by. Use "default" for default TVL sorting.
         * @example default
         * @example tvl
         */
        poolSortField?: 'default' | 'tvl' | 'volume_24h'
        /**
         * @description Sort order direction
         * @example desc
         * @example asc
         */
        sortType?: 'asc' | 'desc'
        /**
         * @description Number of pools per page (max 5000 for token queries)
         * @example 100
         * @example 500
         * @example 1000
         */
        pageSize?: string | number
        /**
         * @description Page number for pagination
         * @example 1
         * @example 2
         * @example 3
         */
        page?: string | number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: {
              type: string
              programId: string
              id: string
              rewardDefaultPoolInfos: 'Ecosystem' | 'Fusion' | 'Raydium' | 'Clmm'
              rewardDefaultInfos: {
                startTime?: number
                endTime?: number
                mint: {
                  chainId: number
                  address: string
                  programId: string
                  logoURI: string
                  symbol: string
                  name: string
                  decimals: number
                  tags: string[]
                  extensions: any
                }
                perSecond: number
              }[]
              mintA: {
                chainId: number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: number
                tags: string[]
                extensions: any
              }
              mintB: {
                chainId: number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: number
                tags: string[]
                extensions: any
              }
              config: {
                id: string
                index: number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: number
                fundFeeRate: number
                defaultRange: number
                defaultRangePoint: number[]
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              poolType: string
              alt: string
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
                feeApr: number
                apr: number
                priceMin: number
                priceMax: number
                rewardApr: number[]
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
                feeApr: number
                apr: number
                priceMin: number
                priceMax: number
                rewardApr: number[]
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
                feeApr: number
                apr: number
                priceMin: number
                priceMax: number
                rewardApr: number[]
              }
            }[]
          }
        }
      }
    }
  }
  getCachedV1PoolsInfoIds: {
    parameters: {
      query: {
        ids: string | string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: {
              type: string
              programId: string
              id: string
              rewardDefaultPoolInfos: 'Ecosystem' | 'Fusion' | 'Raydium' | 'Clmm'
              rewardDefaultInfos: {
                startTime?: number
                endTime?: number
                mint: {
                  chainId: number
                  address: string
                  programId: string
                  logoURI: string
                  symbol: string
                  name: string
                  decimals: number
                  tags: string[]
                  extensions: any
                }
                perSecond: number
              }[]
              mintA: {
                chainId: number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: number
                tags: string[]
                extensions: any
              }
              mintB: {
                chainId: number
                address: string
                programId: string
                logoURI: string
                symbol: string
                name: string
                decimals: number
                tags: string[]
                extensions: any
              }
              config: {
                id: string
                index: number
                protocolFeeRate: number
                tradeFeeRate: number
                tickSpacing: number
                fundFeeRate: number
                defaultRange: number
                defaultRangePoint: number[]
              }
              price: number
              mintAmountA: number
              mintAmountB: number
              feeRate: number
              openTime: string
              tvl: number
              vault: {
                A: string
                B: string
              }
              poolType: string
              alt: string
              day: {
                volume: number
                volumeQuote: number
                volumeFee: number
                feeApr: number
                apr: number
                priceMin: number
                priceMax: number
                rewardApr: number[]
              }
              week: {
                volume: number
                volumeQuote: number
                volumeFee: number
                feeApr: number
                apr: number
                priceMin: number
                priceMax: number
                rewardApr: number[]
              }
              month: {
                volume: number
                volumeQuote: number
                volumeFee: number
                feeApr: number
                apr: number
                priceMin: number
                priceMax: number
                rewardApr: number[]
              }
            }[]
          }
        }
      }
    }
  }
  getCachedV1PoolsByAddressDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Pool state address
         * @example 6nhYRaFQtmLdtjepGayJHgQobN1j22bDAoHYUSPyCAHj
         */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsTopByLimit: {
    parameters: {
      query?: {
        /**
         * @description First token address to filter pools. If only tokenA is provided, returns pools containing this token. If both tokenA and tokenB are provided, returns pools containing both tokens.
         * @example So11111111111111111111111111111111111111112
         */
        tokenA?: string
        /**
         * @description Second token address to filter pools. Must be used together with tokenA to find pools containing both tokens.
         * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
         */
        tokenB?: string
      }
      header?: never
      path: {
        /**
         * @description Number of top pools to return
         * @example 10
         * @example 25
         * @example 50
         */
        limit: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsStatsOverview: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsLineTvl: {
    parameters: {
      query: {
        /**
         * @description Pool ID to get TVL timeline for
         * @example AnSYaAswoEA4HwT6AWGMFQ8BpSyHt8vkrgugiMvwrarg
         */
        poolId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsLineLiquidity: {
    parameters: {
      query: {
        /**
         * @description Pool ID to get liquidity timeline for
         * @example AnSYaAswoEA4HwT6AWGMFQ8BpSyHt8vkrgugiMvwrarg
         */
        poolId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            period: string
            count: number
            data: {
              date: string
              timestamp: number
              liquidity: number
            }[]
          }
        }
      }
    }
  }
  getCachedV1PoolsLinePosition: {
    parameters: {
      query: {
        /**
         * @description Pool ID to get position line data for
         * @example AnSYaAswoEA4HwT6AWGMFQ8BpSyHt8vkrgugiMvwrarg
         */
        poolId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsOhlcvPair: {
    parameters: {
      query: {
        /**
         * @description Pool ID to get OHLCV data for
         * @example AnSYaAswoEA4HwT6AWGMFQ8BpSyHt8vkrgugiMvwrarg
         */
        poolId: string
        /**
         * @description Time interval for OHLCV data
         * @example 15m
         * @example 1H
         * @example 4H
         * @example 1D
         * @example 1W
         */
        type?: '15m' | '1H' | '4H' | '1D' | '1W'
        /**
         * @description Start time as Unix timestamp (seconds). If not provided, calculated automatically for ~100 data points.
         * @example 1714521600
         */
        time_from?: string
        /**
         * @description End time as Unix timestamp (seconds). If not provided, uses current time.
         * @example 1714608000
         */
        time_to?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'getCachedV1PoolsClmm-config': {
    parameters: {
      query?: {
        /**
         * @description Pool ID to get specific config for
         * @example 6nhYRaFQtmLdtjepGayJHgQobN1j22bDAoHYUSPyCAHj
         */
        poolId?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1PoolsAltIds: {
    parameters: {
      query: {
        /**
         * @description Comma-separated list of pool IDs to get alt values for (max 100 IDs)
         * @example 7uvMughbvvn1cqsJPtW7uAD1XyS7W4785qodVGCqsn69,4X4zK1HrqjEwMau9WfRZRxUxcguBn1yBnaBgE7CqYGP5
         */
        poolIds: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedV1TokensMetadataByAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Token mint address
         * @example So11111111111111111111111111111111111111112
         */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: {
              address: string
              symbol: string
              name: string
              decimals?: number
              logoURI?: string
              programId?: string
            }
          }
          'multipart/form-data': {
            success: boolean
            data: {
              address: string
              symbol: string
              name: string
              decimals?: number
              logoURI?: string
              programId?: string
            }
          }
          'text/plain': {
            success: boolean
            data: {
              address: string
              symbol: string
              name: string
              decimals?: number
              logoURI?: string
              programId?: string
            }
          }
        }
      }
    }
  }
  postCachedV1TokensMetadataBatch: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Array of token mint addresses
           * @example [
           *       "So11111111111111111111111111111111111111112",
           *       "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
           *     ]
           */
          addresses: string[]
        }
        'multipart/form-data': {
          /**
           * @description Array of token mint addresses
           * @example [
           *       "So11111111111111111111111111111111111111112",
           *       "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
           *     ]
           */
          addresses: string[]
        }
        'text/plain': {
          /**
           * @description Array of token mint addresses
           * @example [
           *       "So11111111111111111111111111111111111111112",
           *       "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
           *     ]
           */
          addresses: string[]
        }
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: Record<string, never>
            count: number
          }
          'multipart/form-data': {
            success: boolean
            data: Record<string, never>
            count: number
          }
          'text/plain': {
            success: boolean
            data: Record<string, never>
            count: number
          }
        }
      }
    }
  }
  getCachedV1TokensCacheStats: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: {
              cacheSize: number
              cachedTokens: string[]
            }
          }
          'multipart/form-data': {
            success: boolean
            data: {
              cacheSize: number
              cachedTokens: string[]
            }
          }
          'text/plain': {
            success: boolean
            data: {
              cacheSize: number
              cachedTokens: string[]
            }
          }
        }
      }
    }
  }
  deleteCachedV1TokensCacheClear: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            message: string
          }
          'multipart/form-data': {
            success: boolean
            message: string
          }
          'text/plain': {
            success: boolean
            message: string
          }
        }
      }
    }
  }
  getCachedV1TokensPrice: {
    parameters: {
      query: {
        ids: string | string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            success: boolean
            data: Record<string, never>
          }
          'multipart/form-data': {
            id: string
            success: boolean
            data: Record<string, never>
          }
          'text/plain': {
            id: string
            success: boolean
            data: Record<string, never>
          }
        }
      }
    }
  }
  getCachedV1TokensPrice24h: {
    parameters: {
      query: {
        ids: string | string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            success: boolean
            data: Record<string, never>
          }
          'multipart/form-data': {
            id: string
            success: boolean
            data: Record<string, never>
          }
          'text/plain': {
            id: string
            success: boolean
            data: Record<string, never>
          }
        }
      }
    }
  }
  getCachedV1TokensBirdeyeDefiMulti_price: {
    parameters: {
      query: {
        list_address: string | string[]
        /**
         * @description Whether to include liquidity data in the response
         * @example false
         * @example true
         */
        include_liquidity?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: Record<string, never>
          }
          'multipart/form-data': {
            success: boolean
            data: Record<string, never>
          }
          'text/plain': {
            success: boolean
            data: Record<string, never>
          }
        }
      }
    }
  }
  getCachedV1BalancesByWallet: {
    parameters: {
      query?: {
        /** @description Bypass cache and fetch fresh data */
        force_refresh?: boolean
      }
      header?: never
      path: {
        /**
         * @description Solana wallet address
         * @example FCk78ropCQ1BPzWQ77fyyoUgW9pBrtoiYHs794vc5BB4
         */
        wallet: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            success: boolean
            data: unknown
          }
          'multipart/form-data': {
            success: boolean
            data: unknown
          }
          'text/plain': {
            success: boolean
            data: unknown
          }
        }
      }
    }
  }
}
